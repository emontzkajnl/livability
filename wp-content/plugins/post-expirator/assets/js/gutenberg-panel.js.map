{"version":3,"file":"gutenberg-panel.js","mappings":"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","sources":["webpack://post-expirator/./assets/jsx/gutenberg-panel/gutenberg-panel.jsx"],"sourcesContent":["\n(function (wp, config) {\n\n    const {registerPlugin} = wp.plugins;\n    const {PluginDocumentSettingPanel} = wp.editPost;\n    const {PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner} = wp.components;\n    const {Fragment} = wp.element;\n    const {decodeEntities} = wp.htmlEntities;\n    const {isEmpty, keys, compact} = lodash;\n    const {useEffect} = React;\n    const {addQueryArgs} = wp.url;\n    const {\n        useSelect,\n        useDispatch,\n        register,\n        createReduxStore,\n        select\n    } = wp.data;\n    const {apiFetch} = wp;\n\n    const debugLog = (description, ...message) => {\n        if (console && config.isDebugEnabled) {\n            console.debug('[Future]', description, ...message);\n        }\n    }\n\n    const getDefaultState = () => {\n        let defaultState = {\n            futureAction: null,\n            futureActionDate: 0,\n            futureActionEnabled: false,\n            futureActionTerms: [],\n            futureActionTaxonomy: null,\n            termsListByName: null,\n            termsListById: null,\n            taxonomyName: null,\n            isFetchingTerms: false,\n        }\n\n        if (! config || ! config.postTypeDefaultConfig) {\n            return defaultState;\n        }\n\n        if (config.postTypeDefaultConfig.autoEnable) {\n            defaultState.futureActionEnabled = true;\n        }\n\n        if (config.postTypeDefaultConfig.expireType) {\n            defaultState.futureAction = config.postTypeDefaultConfig.expireType;\n        }\n\n        if (config.defaultDate) {\n            defaultState.futureActionDate = parseInt(config.defaultDate);\n        } else {\n            defaultState.futureActionDate = new Date().getTime();\n        }\n\n        if (config.postTypeDefaultConfig.taxonomy) {\n            defaultState.futureActionTaxonomy = config.postTypeDefaultConfig.taxonomy;\n        }\n\n        if (config.postTypeDefaultConfig.terms) {\n            defaultState.futureActionTerms = config.postTypeDefaultConfig.terms.split(',').map(term => parseInt(term));\n        }\n\n        return defaultState;\n    }\n\n    // Step 1: Create the Redux store\n    const DEFAULT_STATE = getDefaultState();\n\n    debugLog('DEFAULT_STATE', DEFAULT_STATE);\n\n    const store = createReduxStore('publishpress-future/store', {\n        reducer(state = DEFAULT_STATE, action) {\n            switch (action.type) {\n                case 'SET_FUTURE_ACTION':\n                    return {\n                        ...state,\n                        futureAction: action.futureAction,\n                    };\n                case 'SET_FUTURE_ACTION_DATE':\n                    return {\n                        ...state,\n                        futureActionDate: action.futureActionDate,\n                    }\n                case 'SET_FUTURE_ACTION_ENABLED':\n                    return {\n                        ...state,\n                        futureActionEnabled: action.futureActionEnabled,\n                    }\n                case 'SET_FUTURE_ACTION_TERMS':\n                    return {\n                        ...state,\n                        futureActionTerms: action.futureActionTerms,\n                    }\n                case 'SET_FUTURE_ACTION_TAXONOMY':\n                    return {\n                        ...state,\n                        futureActionTaxonomy: action.futureActionTaxonomy,\n                    }\n                case 'SET_TERMS_LIST_BY_NAME':\n                    return {\n                        ...state,\n                        termsListByName: action.termsListByName,\n                    }\n                case 'SET_TERMS_LIST_BY_ID':\n                    return {\n                        ...state,\n                        termsListById: action.termsListById,\n                    }\n                case 'SET_TAXONOMY_NAME':\n                    return {\n                        ...state,\n                        taxonomyName: action.taxonomyName,\n                    }\n            }\n\n            return state;\n        },\n        actions: {\n            setFutureAction(futureAction) {\n                return {\n                    type: 'SET_FUTURE_ACTION',\n                    futureAction: futureAction\n                };\n            },\n            setFutureActionDate(futureActionDate) {\n                return {\n                    type: 'SET_FUTURE_ACTION_DATE',\n                    futureActionDate: futureActionDate\n                };\n            },\n            setFutureActionEnabled(futureActionEnabled) {\n                return {\n                    type: 'SET_FUTURE_ACTION_ENABLED',\n                    futureActionEnabled: futureActionEnabled\n                };\n            },\n            setFutureActionTerms(futureActionTerms) {\n                return {\n                    type: 'SET_FUTURE_ACTION_TERMS',\n                    futureActionTerms: futureActionTerms\n                };\n            },\n            setFutureActionTaxonomy(futureActionTaxonomy) {\n                return {\n                    type: 'SET_FUTURE_ACTION_TAXONOMY',\n                    futureActionTaxonomy: futureActionTaxonomy\n                };\n            },\n            setTermsListByName(termsListByName) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_NAME',\n                    termsListByName: termsListByName\n                };\n            },\n            setTermsListById(termsListById) {\n                return {\n                    type: 'SET_TERMS_LIST_BY_ID',\n                    termsListById: termsListById\n                };\n            },\n            setTaxonomyName(taxonomyName) {\n                return {\n                    type: 'SET_TAXONOMY_NAME',\n                    taxonomyName: taxonomyName\n                };\n            },\n            setIsFetchingTerms(isFetchingTerms) {\n                return {\n                    type: 'SET_IS_FETCHING_TERMS',\n                    isFetchingTerms: isFetchingTerms\n                }\n            }\n        },\n        selectors: {\n            getFutureAction(state) {\n                return state.futureAction;\n            },\n            getFutureActionDate(state) {\n                return state.futureActionDate;\n            },\n            getFutureActionEnabled(state) {\n                return state.futureActionEnabled;\n            },\n            getFutureActionTerms(state) {\n                return state.futureActionTerms;\n            },\n            getFutureActionTaxonomy(state) {\n                return state.futureActionTaxonomy;\n            },\n            getTermsListByName(state) {\n                return state.termsListByName;\n            },\n            getTermsListById(state) {\n                return state.termsListById;\n            },\n            getTaxonomyName(state) {\n                return state.taxonomyName;\n            },\n            getIsFetchingTerms(state) {\n                return state.isFetchingTerms;\n            }\n        }\n    });\n\n    register(store);\n\n    // Step 2: Create the component\n    const MyPluginDocumentSettingPanel = () => {\n        const futureAction = useSelect((select) => select('publishpress-future/store').getFutureAction(), []);\n        const futureActionDate = useSelect((select) => select('publishpress-future/store').getFutureActionDate(), []);\n        const futureActionEnabled = useSelect((select) => select('publishpress-future/store').getFutureActionEnabled(), []);\n        const futureActionTerms = useSelect((select) => select('publishpress-future/store').getFutureActionTerms(), []);\n        const futureActionTaxonomy = useSelect((select) => select('publishpress-future/store').getFutureActionTaxonomy(), []);\n        const termsListByName = useSelect((select) => select('publishpress-future/store').getTermsListByName(), []);\n        const termsListById = useSelect((select) => select('publishpress-future/store').getTermsListById(), []);\n        const isFetchingTerms = useSelect((select) => select('publishpress-future/store').getIsFetchingTerms(), []);\n\n        const {\n            setFutureAction,\n            setFutureActionDate,\n            setFutureActionEnabled,\n            setFutureActionTerms,\n            setFutureActionTaxonomy,\n            setTermsListByName,\n            setTermsListById,\n            setTaxonomyName,\n            setIsFetchingTerms\n        } = useDispatch('publishpress-future/store');\n\n        const {editPost} = useDispatch('core/editor');\n\n        const mapTermsFromIdToName = (terms) => {\n            return terms.map((term) => {\n                return termsListById[term];\n            });\n        }\n\n        const mapTermsFromNameToId = (terms) => {\n            return terms.map((term) => {\n                return termsListByName[term].id;\n            });\n        }\n\n        const handleEnabledChange = (isChecked) => {\n            setFutureActionEnabled(isChecked);\n\n            const newAttribute = {\n                'enabled': isChecked\n            }\n\n            // User default values to other fields\n            if (isChecked) {\n                setFutureAction(DEFAULT_STATE.futureAction);\n                setFutureActionDate(DEFAULT_STATE.futureActionDate);\n                setFutureActionTerms(DEFAULT_STATE.futureActionTerms);\n                setFutureActionTaxonomy(DEFAULT_STATE.futureActionTaxonomy);\n\n                newAttribute['action'] = DEFAULT_STATE.futureAction;\n                newAttribute['date'] = DEFAULT_STATE.futureActionDate;\n                newAttribute['terms'] = DEFAULT_STATE.futureActionTerms;\n                newAttribute['taxonomy'] = DEFAULT_STATE.futureActionTaxonomy;\n\n                fetchTerms();\n            }\n\n            editPostAttribute(newAttribute);\n        }\n\n        const handleActionChange = (value) => {\n            setFutureAction(value);\n            editPostAttribute({'action': value});\n        }\n\n        const handleDateChange = (value) => {\n            const date = new Date(value).getTime()/1000;\n\n            setFutureActionDate(date);\n            editPostAttribute({'date': date});\n        }\n\n        const handleTermsChange = (value) => {\n            value = mapTermsFromNameToId(value);\n\n            setFutureActionTerms(value);\n            editPostAttribute({'terms': value});\n        }\n\n        const getPostId = () => {\n            return select('core/editor').getCurrentPostId();\n        }\n\n        const getPostType = () => {\n            return select('core/editor').getCurrentPostType();\n        }\n\n        const fetchFutureActionData = (callback) => {\n            const data = select('core/editor').getEditedPostAttribute('publishpress_future_action');\n            debugLog('fetchFutureActionData', data);\n\n            setFutureActionEnabled(data.enabled).then(callback);\n            setFutureAction(data.action);\n            setFutureActionDate(data.date);\n            setFutureActionTerms(data.terms);\n            setFutureActionTaxonomy(data.taxonomy);\n        }\n\n        const fetchTerms = () => {\n            debugLog('fetchTerms', 'Fetching terms...');\n            const futureActionTaxonomy = select('publishpress-future/store').getFutureActionTaxonomy();\n            const postType = getPostType();\n\n            let termsListByName = {};\n            let termsListById = {};\n\n            setIsFetchingTerms(true);\n\n            debugLog('futureActionTaxonomy', futureActionTaxonomy);\n\n            if ((!futureActionTaxonomy && postType === 'post') || futureActionTaxonomy === 'category') {\n                debugLog('fetchTerms', 'Fetching categories...');\n                apiFetch({\n                    path: addQueryArgs('wp/v2/categories', {per_page: -1}),\n                }).then((list) => {\n                    debugLog('list', list);\n                    list.forEach(cat => {\n                        termsListByName[cat.name] = cat;\n                        termsListById[cat.id] = cat.name;\n                    });\n\n                    setTermsListByName(termsListByName);\n                    setTermsListById(termsListById);\n                    setTaxonomyName(config.strings.category);\n                    setIsFetchingTerms(false);\n                });\n            } else {\n                debugLog('fetchTerms', 'Fetching taxonomies...');\n                apiFetch({\n                    path: addQueryArgs(`publishpress-future/v1/taxonomies/` + postType),\n                }).then((response) => {\n                    debugLog('taxonomies', response.taxonomies);\n\n                    if (response.taxonomies.length > 0) {\n                        apiFetch({\n                            path: addQueryArgs(`wp/v2/taxonomies/${futureActionTaxonomy}`, {context: 'edit', per_page: -1}),\n                        }).then((taxAttributes) => {\n                            debugLog('taxAttributes', taxAttributes);\n                            // fetch all terms\n                            apiFetch({\n                                path: addQueryArgs(`wp/v2/${taxAttributes.rest_base}`, {context: 'edit', per_page: -1}),\n                            }).then((terms) => {\n                                debugLog('terms', terms);\n                                terms.forEach(term => {\n                                    termsListByName[decodeEntities(term.name)] = term;\n                                    termsListById[term.id] = decodeEntities(term.name);\n                                });\n\n                                setTermsListByName(termsListByName);\n                                setTermsListById(termsListById);\n                                setTaxonomyName(decodeEntities(taxAttributes.name));\n                                setIsFetchingTerms(false);\n                            });\n                        });\n                    } else {\n                        debugLog('fetchTerms', 'No taxonomies found');\n                    }\n                });\n            }\n        }\n\n        const editPostAttribute = (newAttribute) => {\n            const attribute = {\n                publishpress_future_action: {\n                    enabled: futureActionEnabled,\n                    date: futureActionDate,\n                    action: futureAction,\n                    terms: futureActionTerms,\n                    taxonomy: futureActionTaxonomy\n                }\n            };\n\n            // For each property on newAttribute, set the value on attribute\n            for (const [name, value] of Object.entries(newAttribute)) {\n                attribute.publishpress_future_action[name] = value;\n            }\n\n            editPost(attribute);\n            debugLog('editPostAttribute', newAttribute, attribute);\n        }\n\n        useEffect(() => {\n            fetchFutureActionData();\n\n            // We need to get the value directly from the store because the value from the state is not updated yet\n            const enabled = select('publishpress-future/store').getFutureActionEnabled();\n            const isCleanNewPost = select('core/editor').isCleanNewPost();\n\n            debugLog('enabled', enabled);\n            debugLog('isCleanNewPost', isCleanNewPost);\n\n            if (enabled) {\n                if (isCleanNewPost) {\n                    handleEnabledChange(true);\n                }\n\n                fetchTerms();\n            }\n        }, []);\n\n        let selectedTerms = [];\n        debugLog('futureActionTerms', futureActionTerms);\n        if (futureActionTerms && futureActionTerms.length > 0 && termsListById) {\n            selectedTerms = compact(mapTermsFromIdToName(futureActionTerms));\n\n            if (typeof selectedTerms === 'string') {\n                selectedTerms = [];\n            }\n        }\n\n        return (\n            <PluginDocumentSettingPanel title={config.strings.panelTitle} icon=\"calendar\"\n                                        initialOpen={futureActionEnabled} className={'post-expirator-panel'}\n            >\n                <PanelRow>\n                    <CheckboxControl\n                        label={config.strings.enablePostExpiration}\n                        checked={futureActionEnabled}\n                        onChange={handleEnabledChange}\n                    />\n                </PanelRow>\n                {futureActionEnabled && (\n                    <Fragment>\n                        <PanelRow>\n                            <DateTimePicker\n                                currentDate={futureActionDate*1000}\n                                onChange={handleDateChange}\n                                __nextRemoveHelpButton={true}\n                                is12Hour={config.is12hours}\n                                startOfWeek={config.startOfWeek}\n                            />\n                        </PanelRow>\n                        <SelectControl\n                            label={config.strings.action}\n                            value={futureAction}\n                            options={config.actionsSelectOptions}\n                            onChange={handleActionChange}\n                        />\n\n                        {\n                            String(futureAction).includes('category') && (\n                                isFetchingTerms && (\n                                    <Fragment>\n                                        {config.strings.loading + ` (${futureActionTaxonomy})`}\n                                        <Spinner/>\n                                    </Fragment>\n                                )\n                                || (\n                                    isEmpty(keys(termsListByName)) && (\n                                        <p><i className=\"dashicons dashicons-warning\"></i> {config.strings.noTermsFound}</p>\n                                    )\n                                    || (\n                                        <FormTokenField\n                                            label={config.strings.terms + ` (${futureActionTaxonomy})`}\n                                            value={selectedTerms}\n                                            suggestions={Object.keys(termsListByName)}\n                                            onChange={handleTermsChange}\n                                            maxSuggestions={10}\n                                        />\n                                    )\n                                )\n                            )\n                        }\n                    </Fragment>\n                )}\n            </PluginDocumentSettingPanel>\n        );\n    };\n\n    // Step 3: Connect the component to the Redux store\n    registerPlugin('publishpress-future-action', {\n        render: MyPluginDocumentSettingPanel\n    });\n\n})(window.wp, window.postExpiratorPanelConfig);\n"],"names":["wp","config","defaultState","registerPlugin","plugins","PluginDocumentSettingPanel","editPost","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","Fragment","element","decodeEntities","htmlEntities","lodash","isEmpty","keys","compact","useEffect","React","addQueryArgs","url","data","useSelect","useDispatch","register","createReduxStore","select","apiFetch","debugLog","description","message","console","isDebugEnabled","debug","DEFAULT_STATE","futureAction","futureActionDate","futureActionEnabled","futureActionTerms","futureActionTaxonomy","termsListByName","termsListById","taxonomyName","isFetchingTerms","postTypeDefaultConfig","autoEnable","expireType","defaultDate","parseInt","Date","getTime","taxonomy","terms","split","map","term","store","reducer","state","action","type","actions","setFutureAction","setFutureActionDate","setFutureActionEnabled","setFutureActionTerms","setFutureActionTaxonomy","setTermsListByName","setTermsListById","setTaxonomyName","setIsFetchingTerms","selectors","getFutureAction","getFutureActionDate","getFutureActionEnabled","getFutureActionTerms","getFutureActionTaxonomy","getTermsListByName","getTermsListById","getTaxonomyName","getIsFetchingTerms","render","handleEnabledChange","isChecked","newAttribute","fetchTerms","editPostAttribute","postType","getCurrentPostType","path","per_page","then","list","forEach","cat","name","id","strings","category","response","taxonomies","length","context","taxAttributes","rest_base","attribute","publishpress_future_action","enabled","date","Object","entries","value","getEditedPostAttribute","callback","isCleanNewPost","selectedTerms","title","panelTitle","icon","initialOpen","className","label","enablePostExpiration","checked","onChange","currentDate","__nextRemoveHelpButton","is12Hour","is12hours","startOfWeek","options","actionsSelectOptions","String","includes","loading","noTermsFound","suggestions","maxSuggestions","window","postExpiratorPanelConfig"],"sourceRoot":""}