<?php

namespace Nexcess\MAPPS\Integrations\PerformanceMonitor\Api;

use StellarWP\PluginFramework\Support\VisualRegressionUrl;

abstract class BaseApi {
	/**
	 * Adds a list of URLs to the queue of URLs to generate Lighthouse reports for.
	 *
	 * @param Array<VisualRegressionUrl> $urls List of URLs to generate Lighthouse reports for.
	 *
	 * @throws \Exception If the API endpoint is not reachable.
	 */
	abstract public function subscribe( array $urls );

	/**
	 * Saves a received report in WP options until all reports are in.
	 *
	 * @param string $received_url  The URL the report was generated for.
	 * @param string $report_string The raw Lighthouse report as string.
	 * @param object $queue_info    The global performance queue information.
	 */
	abstract public function saveReport( $received_url, $report_string, $queue_info );

	/**
	 * Removes the pending requests entries and sends all Lighthouse reports
	 * that have arrived for processing.
	 */
	abstract public function done();

	/**
	 * Returns a token unique to the site that is valid for a certain time.
	 *
	 * Uses `wp_nonce_tick` internally to retrieve an index of a timeslot
	 * since the Unix epoch. Unlike nonces, however, it doesn't take the currently
	 * logged in user into account, only the token seed string unique to each site.
	 *
	 * @param bool     $previous     Whether to generate the previously valid token.
	 * @param int|null $time_ordinal Integer representing a time interval. In normal operation
	 *                               this value is generated by `wp_nonce_tick`. Useful for tests.
	 *
	 * @return string
	 */
	abstract public function getCurrentToken( $previous = false, $time_ordinal = null );

	/**
	 * Returns the previously valid token.
	 *
	 * @param int|null $time_ordinal Integer representing a time interval. In normal operation
	 *                               this value is generated by `wp_nonce_tick`. Useful for tests.
	 *
	 * @return string
	 */
	abstract public function getPreviousToken( $time_ordinal = null );

	/**
	 * A token is valid when it matches the current token
	 * or a token from previous period.
	 *
	 * Note: WordPress nonces use the same mechanism.
	 *
	 * @param string $token Token to be verified.
	 *
	 * @return bool
	 */
	abstract public function verifyToken( $token );

	/**
	 * API requests require a couple of endpoint URLs to be provided
	 * with each request. This methods retrieves the relevant
	 * route instances using the `RouteManager` and constructs their URLs.
	 *
	 * @throws \Exception When one of the required routes is not registered.
	 *
	 * @return Array<string> Array of URLs.
	 */
	abstract public function getRouteUrls();
}
